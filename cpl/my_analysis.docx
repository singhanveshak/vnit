           PROGRAM:

int f() { return 1234;}
void main() { f(); }
           NON OPTIMIZED:

	.file	"prog.c"
	.text
	.globl	f
	.type	f, @function
f:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$1234, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	f, .-f
	.globl	main
	.type	main, @function
main:
.LFB1:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$0, %eax
	call	f
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
           OPTIMIZED:

	.file	"prog.c"
	.text
	.p2align 4
	.globl	f
	.type	f, @function
f:
.LFB0:
	.cfi_startproc
	endbr64
	movl	$1234, %eax
	ret
	.cfi_endproc
.LFE0:
	.size	f, .-f
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB1:
	.cfi_startproc
	endbr64
	ret
	.cfi_endproc
.LFE1:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

           CPL assignment 4: 
to produce optimised and non-optimised assembly of a simple c program
and find the differences.

               File used:
prog.c

               Produced file: 
optimized.c no_optimized.c

               ANALYSIS: 
The optimized assembly code shows a significant difference
    
                   Function f:
        
        Non-optimized: In the non-optimized version, the function f includes standard function prologue and epilogue (pushq, popq instructions), 
        which are used to set up and tear down the function stack frame.
        
        Optimized: In the optimized version, the function f does not include the function prologue and epilogue.
        This is because the function is simple and doesn't require stack manipulation. The return value is directly loaded into the %eax register and returned.

                   Function main:

        Non-optimized: In the non-optimized version, the function main includes a call to function f, 
        followed by a nop instruction. This nop instruction is often inserted to aid debugging.
    
        Optimized: In the optimized version, the function main is empty. This is because the call 
        to function f does not have any side effects and the result is not used, so it's optimized away entirely.

                   Additional Differences:
        Both versions include assembly directives related to the executable and debugging 
        information (.ident, .section, .align, .size, etc.), which are necessary but remain unchanged by optimization.
